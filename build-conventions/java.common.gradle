apply plugin: 'java'

sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

configurations {
  developmentOnly
  runtimeClasspath {
    extendsFrom developmentOnly
  }
}

java {
  withSourcesJar()
}

// Instructs the compiler to retain method parameter names in the generated bytecode.
// This allows frameworks that rely on reflection (such as Spring, Jackson, Feign, etc.)
// to access actual parameter names at runtime. Without this option, parameter names
// are not available via reflection, which may cause runtime issues when names are required
// for parameter binding, deserialization, or API contract generation.
tasks.withType(JavaCompile).configureEach {
  options.compilerArgs += "-parameters"
}

dependencies {
  implementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
  implementation platform("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
  implementation platform("org.springframework.statemachine:spring-statemachine-bom:4.0.0")

  implementation platform("software.amazon.awssdk:bom:2.29.26")
  implementation platform("com.azure:azure-sdk-bom:1.2.15")
  implementation platform("io.projectreactor:reactor-bom:2023.0.3")
  implementation platform("io.cucumber:cucumber-bom:7.15.0")
  implementation platform("org.testcontainers:testcontainers-bom:1.20.1")
  implementation platform("org.apache.groovy:groovy-bom:4.0.21")
  implementation platform("org.spockframework:spock-bom:2.3-groovy-4.0")
  implementation platform("io.jsonwebtoken:jjwt-root:0.12.6")
  implementation platform("io.rest-assured:rest-assured-bom:5.4.0")
  implementation platform("io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom:2.16.0")

  compileOnly "org.projectlombok:lombok:1.18.30"
  annotationProcessor "org.projectlombok:lombok:1.18.30"

  testCompileOnly "org.projectlombok:lombok:1.18.30"
  testAnnotationProcessor "org.projectlombok:lombok:1.18.30"

  testImplementation "org.mockito:mockito-core"
  testImplementation "org.mockito:mockito-junit-jupiter"

  testImplementation "org.junit.jupiter:junit-jupiter-api"
  testImplementation 'org.assertj:assertj-core'
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
}

plugins.withId('java-test-fixtures') {
  dependencies {
      testFixturesImplementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
      testFixturesImplementation platform("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")

      testFixturesCompileOnly "org.projectlombok:lombok:1.18.30"
      testFixturesAnnotationProcessor "org.projectlombok:lombok:1.18.30"

      testFixturesImplementation "org.mockito:mockito-core"
      testFixturesImplementation "org.mockito:mockito-junit-jupiter"

      testFixturesImplementation "org.junit.jupiter:junit-jupiter-api"
      testFixturesRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
  }
}

plugins.withId('groovy') {
  dependencies {
    testImplementation "org.apache.groovy:groovy"
    testImplementation "org.apache.groovy:groovy-nio"
    testImplementation "org.apache.groovy:groovy-json"
  }
}

test {
  jvmArgs '-Duser.timezone=UTC'
  if (project.hasProperty("enableTestDebug") && project.property("enableTestDebug") == "true") {
      jvmArgs "-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005"
  }
  useJUnitPlatform()
}
